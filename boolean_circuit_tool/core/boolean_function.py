import typing as tp


__all__ = ['BooleanFunction']


class BooleanFunction(tp.Protocol):
    """Protocol for any object that behaves like boolean function, e.g. Circuit,
    TruthTable or PythonFunction."""

    def input_size(self) -> int: ...
    def output_size(self) -> int: ...
    def evaluate(self, inputs: list[bool]) -> list[bool]: ...
    def is_constant(self) -> bool: ...
    def is_out_constant(self, index: int) -> bool: ...
    def is_monotonic(self) -> bool: ...
    def is_out_monotonic(self, index: int) -> bool: ...

    def is_out_dependent_from_input(
        self, output_index: int, input_index: int
    ) -> bool: ...

    def get_out_is_input_negation(
        self, out_index: int, in_index: int
    ) -> tp.Optional[int]: ...
    def get_out_significant_inputs(self, out_index) -> list[int]: ...
    def is_out_symmetric(self, out_index: int) -> bool: ...

    def get_out_symmetric_and_negations(
        self, out_indexes: list[int]
    ) -> tp.Optional[list[bool]]: ...
    def is_symmetric(self) -> bool: ...
